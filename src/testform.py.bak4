#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    May 01, 2017 04:53:55 PM
import sys
#import pyTestClass

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import testform_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    testform_support.set_Tk_var()
    top = SwipeSense_Product_Functional_ (root)
    testform_support.init(root, top)
    root.mainloop()

w = None
def create_SwipeSense_Product_Functional_(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    testform_support.set_Tk_var()
    top = SwipeSense_Product_Functional_ (w)
    testform_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_SwipeSense_Product_Functional_():
    global w
    w.destroy()
    w = None


class SwipeSense_Product_Functional_:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1168x947+-1460+580")
        top.title("SwipeSense Product Functional ")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.03, rely=0.03, relheight=0.17, relwidth=0.94)
        self.Frame1.configure(relief=RIDGE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=RIDGE)
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=1095)

        self.Button_Scan = Button(top)
        self.Button_Scan.place(relx=0.84, rely=0.26, height=91, width=150)
        self.Button_Scan.configure(activebackground="#d9d9d9")
        self.Button_Scan.configure(activeforeground="#000000")
        self.Button_Scan.configure(background="#d9d9d9")
        self.Button_Scan.configure(disabledforeground="#a3a3a3")
        self.Button_Scan.configure(foreground="#000000")
        self.Button_Scan.configure(highlightbackground="#d9d9d9")
        self.Button_Scan.configure(highlightcolor="black")
        self.Button_Scan.configure(pady="0")
        self.Button_Scan.configure(text='''Scan''')

        self.Button_Exit = Button(top)
        self.Button_Exit.place(relx=0.85, rely=0.5, height=91, width=150)
        self.Button_Exit.configure(activebackground="#d9d9d9")
        self.Button_Exit.configure(activeforeground="#000000")
        self.Button_Exit.configure(background="#d9d9d9")
        self.Button_Exit.configure(disabledforeground="#a3a3a3")
        self.Button_Exit.configure(foreground="#000000")
        self.Button_Exit.configure(highlightbackground="#d9d9d9")
        self.Button_Exit.configure(highlightcolor="black")
        self.Button_Exit.configure(pady="0")
        self.Button_Exit.configure(text='''EXIT''')
        self.Button_Exit.bind('<ButtonRelease-1>',lambda e:testform_support.onClick(e))

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Progressbar = ttk.Progressbar(top)
        self.Progressbar.place(relx=0.44, rely=0.38, relwidth=0.36, relheight=0.0
                , height=22)
        self.Progressbar.configure(variable=testform_support.TestProgress)

        self.Message1 = Message(top)
        self.Message1.place(relx=0.05, rely=0.27, relheight=0.06, relwidth=0.31)
        self.Message1.configure(anchor=W)
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='''Message''')
        self.Message1.configure(textvariable=testform_support.fixtureStatus)
        self.Message1.configure(width=358)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.1, rely=0.68, height=36, width=55)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Label''')
        

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.39, rely=0.27, relheight=0.05, relwidth=0.41)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(textvariable=testform_support.BCEntry)
        self.Entry1.configure(width=484)
        self.Entry1.bind('<Return>',testform_support.getBarcodeEntry)







if __name__ == '__main__':
    vp_start_gui()



